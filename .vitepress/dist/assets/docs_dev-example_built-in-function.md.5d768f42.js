import{_ as t,o as a,c as d,O as s}from"./chunks/framework.dd9db2cc.js";const y=JSON.parse('{"title":"Ngbatis内置函数与变量","description":"","frontmatter":{},"headers":[],"relativePath":"docs/dev-example/built-in-function.md","filePath":"docs/dev-example/built-in-function.md"}'),l={name:"docs/dev-example/built-in-function.md"},e=s(`<h1 id="ngbatis内置函数与变量" tabindex="-1">Ngbatis内置函数与变量 <a class="header-anchor" href="#ngbatis内置函数与变量" aria-label="Permalink to &quot;Ngbatis内置函数与变量&quot;">​</a></h1><h2 id="如何使用内置函数与变量" tabindex="-1">如何使用内置函数与变量 <a class="header-anchor" href="#如何使用内置函数与变量" aria-label="Permalink to &quot;如何使用内置函数与变量&quot;">​</a></h2><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">your</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">domain</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PersonDao</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">insertPerson</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">mapper</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">your.domain.PersonDao</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">insert</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">insertPerson</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        @var kv = ng.kv( ng_args[0], &#39;&#39;, true, true );</span></span>
<span class="line"><span style="color:#A6ACCD;">        @var id = ng.id( ng_args[0] );</span></span>
<span class="line"><span style="color:#A6ACCD;">        @var tagName = ng.tagName( ng_args[0] );</span></span>
<span class="line"><span style="color:#A6ACCD;">        INSERT VERTEX \`\${ tagName }\` (</span></span>
<span class="line"><span style="color:#A6ACCD;">            \${ ng.join( @kv.columns, &quot;,&quot;, &quot;ng.schemaFmt&quot; ) }</span></span>
<span class="line"><span style="color:#A6ACCD;">        )</span></span>
<span class="line"><span style="color:#A6ACCD;">        VALUES \${ id } : (</span></span>
<span class="line"><span style="color:#A6ACCD;">            \${ ng.join( @kv.values ) }</span></span>
<span class="line"><span style="color:#A6ACCD;">        );</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">insert</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">mapper</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><blockquote><p>此出用到了 <code>ng.kv</code>、<code>ng.id</code>、<code>ng.tagName</code>、<code>ng.join</code>、<code>ng.schemaFmt</code>等内置函数，用到了<code>ng_args</code>内置参数。 了解了使用的地方之后，咱们在往下的内容中，将对函数进一步介绍。</p></blockquote><h2 id="内置变量" tabindex="-1">内置变量 <a class="header-anchor" href="#内置变量" aria-label="Permalink to &quot;内置变量&quot;">​</a></h2><ul><li>ng_cm ClassModel Dao接口的类模型，便于在xml中拿到更多类信息 (1.1.0-rc)</li><li>ng_mm MethodModel Dao接口中某个方法的模型，便于在xml中拿到方法信息，包括入参类型。(1.1.0-rc)</li><li>ng_args 传入Dao接口的原始参数，未序列化前。(1.1.0-rc)</li></ul><h2 id="内置函数" tabindex="-1">内置函数 <a class="header-anchor" href="#内置函数" aria-label="Permalink to &quot;内置函数&quot;">​</a></h2><ul><li><p>ng.valueFmt</p><blockquote><p>对不定类型的数据值进行格式化，忽略是否追加单引号及日期格式化，直接传原始 java类型即可</p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>是否必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>值</td><td>Object</td><td>Y</td><td></td></tr><tr><td>2</td><td>如果是字符串是否在前后追加 .* 形成模糊查询</td><td>boolean</td><td>N</td><td>false</td></tr></tbody></table><blockquote><p>自 v1.1.2 起，默认对字符串类型进行转义，可使用：<code>ValueFmtFn.setEscape( false )</code> 进行关闭</p></blockquote></li><li><p>ng.schemaFmt</p><blockquote><p>对模式名前后追加 <strong>\`</strong>，以避免与数据库关键字冲突</p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>模式名，如 tagName, edgeName, propertyName</td><td>Object</td><td>Y</td><td></td></tr></tbody></table></li><li><p>ng.tagName</p><blockquote><p>用于从实体类或Dao接口获取 tag name</p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>与Schema对应的实体类对象</td><td>Object</td><td>Y</td><td></td></tr><tr><td>2</td><td>类模型，使用 <code>ng_cm</code> 传入</td><td>ClassModel</td><td>N</td><td>null</td></tr></tbody></table></li><li><p>ng.pkField</p><blockquote><p>用于获取 主键属性，java.lang.reflect.Field</p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>实体类类型</td><td>Class&lt;?&gt;</td><td>Y</td><td></td></tr><tr><td>2</td><td>如果不存在主键是否报错中断</td><td>Boolean</td><td>N</td><td>false</td></tr></tbody></table></li><li><p>ng.pkName</p><blockquote><p>用于获取 主键名，String</p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>实体类对象</td><td>Object</td><td>Y</td><td></td></tr><tr><td>2</td><td>true 时使用列名，false 时使用属性名</td><td>Boolean</td><td>N</td><td>true</td></tr></tbody></table></li><li><p>ng.entityType</p><blockquote><p>用于获取实体类类型</p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>实体类对象</td><td>Object</td><td>Y</td><td></td></tr></tbody></table></li><li><p>ng.fieldNames</p><blockquote><p>获取属性名集合（不包括主键）</p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>实体类对象</td><td>Object</td><td>Y</td><td></td></tr><tr><td>2</td><td>true 时使用列名，false 时使用属性名</td><td>Boolean</td><td>N</td><td>true</td></tr></tbody></table></li><li><p>ng.id</p><blockquote><p>获取id值</p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>实体类对象</td><td>Object</td><td>Y</td><td></td></tr><tr><td>2</td><td>如果不存在主键是否报错中断</td><td>Boolean</td><td>N</td><td>true</td></tr><tr><td>3</td><td>如果值为空，true会通过主键生成器返回新值，false 时 返回空</td><td>Boolean</td><td>N</td><td>true</td></tr></tbody></table></li><li><p>ng.kv</p><blockquote><p>通过实体对象或者获取多个集合</p><ul><li>columns 列名集合</li><li>valueNames 属性名集合</li><li>values 值集合</li><li>types 属性类型</li></ul></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>实体类对象</td><td>Object</td><td>Y</td><td></td></tr><tr><td>2</td><td>参数名前缀</td><td>String</td><td>N</td><td>null</td></tr><tr><td>3</td><td>是否排除主键</td><td>Boolean</td><td>N</td><td>true</td></tr><tr><td>4</td><td>是否排除空值</td><td>Boolean</td><td>N</td><td>true</td></tr><tr><td>5</td><td>如无主键，是否报错中断</td><td>Boolean</td><td>N</td><td>true</td></tr></tbody></table></li><li><p>ng.join</p><blockquote><p>对集合进行格式化</p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>待格式化的集合</td><td>Iterable</td><td>Y</td><td></td></tr><tr><td>2</td><td>元素间的分隔符</td><td>String</td><td>N</td><td><code>,</code></td></tr><tr><td>3</td><td>函数名，各元素拼接前，可进行函数名指定的格式化函数先行格式化，再拼接</td><td>String</td><td>N</td><td>null</td></tr></tbody></table></li><li><p>ng.ifStringLike</p><blockquote><p>类型为字符串时，前后拼接 <code>.*</code></p></blockquote><table><thead><tr><th>参数位</th><th>参数说明</th><th>类型</th><th>必传</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>值</td><td>Object</td><td>Y</td><td></td></tr><tr><td>2</td><td>属性类型</td><td>Object</td><td>N</td><td>null</td></tr><tr><td>3</td><td>属性名，用于不将值明文写在 ngql 中，而使用参数名，让 nebula 在参数中取值</td><td>String</td><td>N</td><td>null</td></tr></tbody></table></li></ul>`,9),n=[e];function o(p,r,c,h,i,b){return a(),d("div",null,n)}const D=t(l,[["render",o]]);export{y as __pageData,D as default};
